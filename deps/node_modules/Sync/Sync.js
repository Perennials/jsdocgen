"use strict";

require( 'Prototype' );
var Events = require( 'events' );

/**
Class for synchronizing several callbacks.
When a predefined number of callbacks notify
the object, the lock is released.
@def class Semaphore
@author Borislav Peev <borislav.asdf@gmail.com>
*/

/**
@def constructor Semaphore ( nlocks, callback )
@param int Number of inital locks.
@param function Callback to be notified when the lock is released.
*/
function Semaphore ( nlocks, callback ) {
    Events.EventEmitter.call( this );
    this._nLocks = nlocks;
    this._callback = callback;
}

Semaphore.extend( Events.EventEmitter, {

	/**
	Notifies the lock once.
	@def function Semaphore.notify ()
	*/
	notify: function () {
		--this._nLocks;
		if ( this._nLocks < 0 ) {
			throw new Error( 'Unable to notify lock, all locks are released' )
		}
		this.emit( 'notify' );
		if ( this._nLocks === 0 ) {
			this._callback();
			this.emit( 'released' );
		}
	},

	/**
	Increases the lock count.
	@def function Semaphore.lock ()
	*/
	lock: function () {
		++this._nLocks;
	}
} );

module.exports = {
	Semaphore: Semaphore
};