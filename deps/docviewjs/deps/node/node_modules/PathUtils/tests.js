"use strict";

global.UNITESTS = true;
require( 'Unitest' );
var PathUtils = require( './PathUtils.js' );


Unitest( 'PathUtils.match()', function () {
	var match = PathUtils.match( 'test/file.cpp', 'test/file.cpp' );
	test( match[0] == 'test/file.cpp' );

	var match = PathUtils.match( 'test/file.cpp', '*.cpp' );
	test( match === false );

	var match = PathUtils.match( 'test/file.cpp', '**.cpp' );
	test( match[0] == 'test/file.cpp' );
	test( match[1] == 'test/file' );

	var match = PathUtils.match( 'test/file.cpp', '**/*.cpp' );
	test( match[0] == 'test/file.cpp' );
	test( match[1] == 'test' );
	test( match[2] == 'file' );

	var match = PathUtils.match( 'file.cpp', '**/*.cpp' );
	test( match === false );

	var match = PathUtils.match( 'test/file.cpp', '***.cpp' );
	test( match[0] == 'test/file.cpp' );
	test( match[1] == 'test/' );
	test( match[2] == 'file' );

	var match = PathUtils.match( 'file.cpp', '***.cpp' );
	test( match[0] == 'file.cpp' );
	test( match[1] == '' );
	test( match[2] == 'file' );

	var match = PathUtils.match( 'test/asd/file.cpp', '***.cpp' );
	test( match[0] == 'test/asd/file.cpp' );
	test( match[1] == 'test/asd/' );
	test( match[2] == 'file' );

	var match = PathUtils.match( 'test/asd/file.cpp', '**.cpp' );
	test( match[0] == 'test/asd/file.cpp' );
	test( match[1] == 'test/asd/file' );
} );


Unitest( 'PathUtils.matchOr()', function () {
	test( PathUtils.matchOr( 'file.cpp', [ '*.php', '*.js' ] ) === false );
	test( PathUtils.matchOr( 'file.cpp', [ '*.php', '*.cpp' ] ) !== false );
} );

Unitest( 'PathUtils.matchAnd()', function () {
	test( PathUtils.matchAnd( 'file.cpp', [ '*.cpp', '*.js' ] ) === false );
	test( PathUtils.matchAnd( 'file.cpp', [ '*.cpp', 'f*.cpp' ] ) !== false );
} );


Unitest( 'PathUtils.walk()', function () {
	var list = PathUtils.listPath( __dirname + '/tests', '**', PathUtils.LIST_ALL | PathUtils.WALK_DEFAULT | PathUtils.WALK_INCLUDE_DIRS );
	testeq( JSON.stringify( list ) , JSON.stringify( [ "not_hidden/nothidden.txt", "not_hidden/_hidden.txt", "not_hidden", 'public.txt', 'subfolder/subpublic.txt', 'subfolder', '_hidden/hidden.txt', '_hidden' ] ) );

	var list = PathUtils.listPath( __dirname + '/tests', '**', PathUtils.LIST_ALL | PathUtils.WALK_DEFAULT );
	testeq( JSON.stringify( list ) , JSON.stringify( [ "not_hidden/nothidden.txt", "not_hidden/_hidden.txt", 'public.txt', 'subfolder/subpublic.txt', '_hidden/hidden.txt' ] ) );

	var list = PathUtils.listPath( __dirname + '/tests', '**:_*|**/_*', PathUtils.LIST_ALL | PathUtils.WALK_DEFAULT | PathUtils.WALK_INCLUDE_DIRS );
	testeq( JSON.stringify( list ) , JSON.stringify( [ "not_hidden/nothidden.txt","not_hidden", 'public.txt', 'subfolder/subpublic.txt', 'subfolder' ] ) );
} );


Unitest( 'PathUtils.removeDir()', function () {
	var Fs = require( 'fs' );
	var dir = __dirname + '/tests/_removeme';
	if ( !Fs.existsSync( dir ) ) {
		Fs.mkdirSync( dir );
	}
	test( Fs.statSync( dir ).isDirectory() );

	var file = dir + '/file.txt';
	Fs.writeFileSync( file, '' );
	test( Fs.statSync( file ).isFile() );

	var file1 = dir + '/file1.tmp';
	Fs.writeFileSync( file1, '' );
	test( Fs.statSync( file1 ).isFile() );

	var sub = dir + '/sub';
	if ( !Fs.existsSync( sub ) ) {
		Fs.mkdirSync( sub );
	}
	test( Fs.statSync( sub ).isDirectory() );

	var subfile = sub + '/file.txt';
	Fs.writeFileSync( subfile, '' );
	test( Fs.statSync( subfile ).isFile() );

	test( PathUtils.cleanDir( dir, '***.tmp' ) === true );
	test( Fs.existsSync( file ) === true )
	test( Fs.existsSync( file1 ) === false )

	test( PathUtils.removeDir( dir ) === true );
	test( Fs.existsSync( dir ) === false );
} );


Unitest( 'PathUtils.createDir()', function () {
	var Fs = require( 'fs' );
	var dir1 = __dirname + '/tests/_removeme';
	var dir2 = dir1 + '/subdir/subsubdir';
	test( !Fs.existsSync( dir1 ) );
	PathUtils.createDir( dir2 );
	test( Fs.statSync( dir2 ).isDirectory() );
	PathUtils.removeDir( dir1 );
} );
